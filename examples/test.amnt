:is_multiple_of_3_or_5 # Int -> Int # [
	:x 0 define
	dup 3 % 0 = [:x 1 define] [] ifelse
	5 % 0 = [:x 1 define] [] ifelse
	x
] define

:fibonacci # Int -> Int # [
	:n swap define
	n 2 < [
		n
	] [
		:fnow 0 define
		:fnext 1 define
		:tempf 0 define
		[ n 0 > ] [
			:tempf fnow fnext + define
			:fnow fnext define
			:fnext tempf define
			:n n 1 - define
		] while
		fnext
	] ifelse
] define

:project_euler_one # Int -> Void # [
	:i 0 define
	:sum 0 define
	[ i 1000 < ] [
		i is_multiple_of_3_or_5 [:sum sum i + define] if
		:i i 1 + define
	] while
	sum print
] define

:project_euler_two # Int -> Void # [
	:j 1 define
	:sum 0 define
	:value 0 define
	[ :value j fibonacci define value 4000000 < ] [
		value 2 % 0 = [:sum sum value + define] if
		:j j 1 + define
	] while
	sum print
] define

:square # Int -> Int # [
	dup *
] define

:largest_prime_factor # Int -> Int # [
	:i 2 define
	:n swap define
	[ i square n <= ] [
		n i % 0 != [
			:i i 1 + define
		] if
		n i % 0 = [
			:n n i / define
		] if
	] while
	n
] define

:project_euler_three [
	600851475143 largest_prime_factor print
] define


:programmed_forever [
	[1] swap while
] define

:programmed_if [
	[] ifelse
] define

:max # [Int Int] -> Int # [
	:a swap define
	:b swap define
	a b > [a] [b] ifelse
] define

:lcm [
	:x swap define
	:y swap define
	:should_loop 1 define
	x y max :z swap define
	[should_loop] [
		z x % 0 = [
			z y % 0 = [
				:should_loop 0 define
			] if
		] if
		:z z 1 + define
	] while
	z 1 -
] define

#
Warning:
This function contains things that are hideously unoptimised.
#

:project_euler_five [
	:result 1 define
	1 11 range :xf [
		:result xf result lcm define
	] for
	result print
] define

:get_palindrome [
	:num swap define
	:rev_num 0 define
	[ num 0 > ]
	[
		:rev_num rev_num 10 * num 10 % + define
		:num num 10 / float2int define
	] while
	rev_num
] define

:is_palindromic [
	dup get_palindrome =
] define

:project_euler_four [
	:largest 0 define
	100 1000 range :i [
		100 1000 range :j [
			:ij i j * define
			ij largest > [
				ij is_palindromic [
					:largest ij define
				] if
			] if
		] for
	] for
	largest print
] define
project_euler_one
project_euler_two
project_euler_three
# four and five both *technically* work however they are ridiculously inefficient and slow! :)
project_euler_four
project_euler_five
#
#
232792560 is_evenly_divisible_by_1_to_20 print
:acc 1 define
1 21 range :current [
	:acc acc current * define
] for
acc print


:acc 0 define [ :acc acc 1 + define acc 10_000 % 0 = [ acc print ] if ] forever

:summation 0 define
1 10_000_000 range :acc [ :summation summation acc + define ] for
summation print
#
